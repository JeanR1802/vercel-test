// app/actions.ts
'use server';

import { createClient } from '@supabase/supabase-js';
import { redirect } from 'next/navigation';

export async function createStoreAction(formData: FormData) {
  const slug = formData.get('slug') as string;
  console.log('üöÄ Acci√≥n createStoreAction iniciada. Slug recibido:', slug);

  if (!slug || !/^[a-z0-9\-]+$/.test(slug)) {
    console.error('‚ùå ERROR: El slug es inv√°lido o est√° vac√≠o.');
    // Simplemente lanzamos un error o retornamos, pero sin devolver un objeto
    return;
  }
  console.log('‚úÖ Slug es v√°lido.');

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );

  console.log('üîç Verificando si el slug ya existe en Supabase...');
  const { data: existingStore } = await supabase
    .from('Store')
    .select('slug')
    .eq('slug', slug)
    .single();

  console.log('üìù Resultado de la verificaci√≥n (si es null, est√° libre):', existingStore);

  if (existingStore) {
    console.error('‚ùå ERROR: El slug ya est√° en uso. Deteniendo la acci√≥n.');
    // CORRECCI√ìN: No devolvemos un objeto, solo paramos la ejecuci√≥n.
    return; 
  }

  console.log('‚ûï Intentando insertar nueva tienda en Supabase...');
  const { error } = await supabase.from('Store').insert({
    slug: slug,
    name: `Tienda de ${slug}`,
    status: 'BUILT',
    heroTitle: 'Bienvenido a mi tienda',
    heroDescription: 'Aqu√≠ encontrar√°s productos incre√≠bles.',
    primaryColor: '#0070f3',
    template: 'default'
  });

  if (error) {
    console.error('‚ùå ERROR de Supabase al insertar:', error);
    // CORRECCI√ìN: No devolvemos un objeto.
    return;
  }

  const domain = process.env.NODE_ENV === 'production' 
    ? 'tudominio.com'
    : 'localhost:3000';
  
  const newUrl = `http://${slug}.${domain}`;
  console.log(`‚úÖ Tienda creada con √©xito. Redirigiendo a: ${newUrl}`);
  
  redirect(newUrl);
}